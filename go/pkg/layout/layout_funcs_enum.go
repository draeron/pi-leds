// Code generated by go-enum
// DO NOT EDIT!

package layout

import (
	"fmt"
	"strings"
)

const (
	// RowMajorLayout is a Layout of type RowMajorLayout
	RowMajorLayout Layout = iota
	// RowMajor90Layout is a Layout of type RowMajor90Layout
	RowMajor90Layout
	// RowMajor180Layout is a Layout of type RowMajor180Layout
	RowMajor180Layout
	// RowMajor270Layout is a Layout of type RowMajor270Layout
	RowMajor270Layout
	// ColumnMajorLayout is a Layout of type ColumnMajorLayout
	ColumnMajorLayout
	// ColumnMajor90Layout is a Layout of type ColumnMajor90Layout
	ColumnMajor90Layout
	// ColumnMajor180Layout is a Layout of type ColumnMajor180Layout
	ColumnMajor180Layout
	// ColumnMajor270Layout is a Layout of type ColumnMajor270Layout
	ColumnMajor270Layout
	// RowMajorAlternatingLayout is a Layout of type RowMajorAlternatingLayout
	RowMajorAlternatingLayout
	// RowMajorAlternating90Layout is a Layout of type RowMajorAlternating90Layout
	RowMajorAlternating90Layout
	// RowMajorAlternating180Layout is a Layout of type RowMajorAlternating180Layout
	RowMajorAlternating180Layout
	// RowMajorAlternating270Layout is a Layout of type RowMajorAlternating270Layout
	RowMajorAlternating270Layout
	// ColumnMajorAlternatingLayout is a Layout of type ColumnMajorAlternatingLayout
	ColumnMajorAlternatingLayout
	// ColumnMajorAlternating90Layout is a Layout of type ColumnMajorAlternating90Layout
	ColumnMajorAlternating90Layout
	// ColumnMajorAlternating180Layout is a Layout of type ColumnMajorAlternating180Layout
	ColumnMajorAlternating180Layout
	// ColumnMajorAlternating270Layout is a Layout of type ColumnMajorAlternating270Layout
	ColumnMajorAlternating270Layout
)

const _LayoutName = "RowMajorLayoutRowMajor90LayoutRowMajor180LayoutRowMajor270LayoutColumnMajorLayoutColumnMajor90LayoutColumnMajor180LayoutColumnMajor270LayoutRowMajorAlternatingLayoutRowMajorAlternating90LayoutRowMajorAlternating180LayoutRowMajorAlternating270LayoutColumnMajorAlternatingLayoutColumnMajorAlternating90LayoutColumnMajorAlternating180LayoutColumnMajorAlternating270Layout"

var _LayoutNames = []string{
	_LayoutName[0:14],
	_LayoutName[14:30],
	_LayoutName[30:47],
	_LayoutName[47:64],
	_LayoutName[64:81],
	_LayoutName[81:100],
	_LayoutName[100:120],
	_LayoutName[120:140],
	_LayoutName[140:165],
	_LayoutName[165:192],
	_LayoutName[192:220],
	_LayoutName[220:248],
	_LayoutName[248:276],
	_LayoutName[276:306],
	_LayoutName[306:337],
	_LayoutName[337:368],
}

func LayoutNames() []string {
	tmp := make([]string, len(_LayoutNames))
	copy(tmp, _LayoutNames)
	return tmp
}

var _LayoutMap = map[Layout]string{
	0:  _LayoutName[0:14],
	1:  _LayoutName[14:30],
	2:  _LayoutName[30:47],
	3:  _LayoutName[47:64],
	4:  _LayoutName[64:81],
	5:  _LayoutName[81:100],
	6:  _LayoutName[100:120],
	7:  _LayoutName[120:140],
	8:  _LayoutName[140:165],
	9:  _LayoutName[165:192],
	10: _LayoutName[192:220],
	11: _LayoutName[220:248],
	12: _LayoutName[248:276],
	13: _LayoutName[276:306],
	14: _LayoutName[306:337],
	15: _LayoutName[337:368],
}

func (i Layout) String() string {
	if str, ok := _LayoutMap[i]; ok {
		return str
	}
	return fmt.Sprintf("Layout(%d)", i)
}

var _LayoutValue = map[string]Layout{
	_LayoutName[0:14]:    0,
	_LayoutName[14:30]:   1,
	_LayoutName[30:47]:   2,
	_LayoutName[47:64]:   3,
	_LayoutName[64:81]:   4,
	_LayoutName[81:100]:  5,
	_LayoutName[100:120]: 6,
	_LayoutName[120:140]: 7,
	_LayoutName[140:165]: 8,
	_LayoutName[165:192]: 9,
	_LayoutName[192:220]: 10,
	_LayoutName[220:248]: 11,
	_LayoutName[248:276]: 12,
	_LayoutName[276:306]: 13,
	_LayoutName[306:337]: 14,
	_LayoutName[337:368]: 15,
}

// ParseLayout attempts to convert a string to a Layout
func ParseLayout(name string) (Layout, error) {
	if x, ok := _LayoutValue[name]; ok {
		return Layout(x), nil
	}
	return Layout(0), fmt.Errorf("%s is not a valid Layout, try [%s]", name, strings.Join(_LayoutNames, ", "))
}
