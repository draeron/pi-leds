// Code generated by go-enum
// DO NOT EDIT!

package color

import (
	"fmt"
	"strings"
)

const (
	// Red is a PaletteColor of type Red
	Red PaletteColor = iota
	// Orange is a PaletteColor of type Orange
	Orange
	// Yellow is a PaletteColor of type Yellow
	Yellow
	// YellowGreen is a PaletteColor of type YellowGreen
	YellowGreen
	// Green is a PaletteColor of type Green
	Green
	// CyanGreen is a PaletteColor of type CyanGreen
	CyanGreen
	// Cyan is a PaletteColor of type Cyan
	Cyan
	// CyanBlue is a PaletteColor of type CyanBlue
	CyanBlue
	// Blue is a PaletteColor of type Blue
	Blue
	// Purple is a PaletteColor of type Purple
	Purple
	// Magenta is a PaletteColor of type Magenta
	Magenta
	// MagentaRed is a PaletteColor of type MagentaRed
	MagentaRed
	// White is a PaletteColor of type White
	White
	// Black is a PaletteColor of type Black
	Black
	// LightGray is a PaletteColor of type LightGray
	LightGray
	// Gray is a PaletteColor of type Gray
	Gray
	// DarkGray is a PaletteColor of type DarkGray
	DarkGray
)

const _PaletteColorName = "RedOrangeYellowYellowGreenGreenCyanGreenCyanCyanBlueBluePurpleMagentaMagentaRedWhiteBlackLightGrayGrayDarkGray"

var _PaletteColorNames = []string{
	_PaletteColorName[0:3],
	_PaletteColorName[3:9],
	_PaletteColorName[9:15],
	_PaletteColorName[15:26],
	_PaletteColorName[26:31],
	_PaletteColorName[31:40],
	_PaletteColorName[40:44],
	_PaletteColorName[44:52],
	_PaletteColorName[52:56],
	_PaletteColorName[56:62],
	_PaletteColorName[62:69],
	_PaletteColorName[69:79],
	_PaletteColorName[79:84],
	_PaletteColorName[84:89],
	_PaletteColorName[89:98],
	_PaletteColorName[98:102],
	_PaletteColorName[102:110],
}

func PaletteColorNames() []string {
	tmp := make([]string, len(_PaletteColorNames))
	copy(tmp, _PaletteColorNames)
	return tmp
}

var _PaletteColorMap = map[PaletteColor]string{
	0:  _PaletteColorName[0:3],
	1:  _PaletteColorName[3:9],
	2:  _PaletteColorName[9:15],
	3:  _PaletteColorName[15:26],
	4:  _PaletteColorName[26:31],
	5:  _PaletteColorName[31:40],
	6:  _PaletteColorName[40:44],
	7:  _PaletteColorName[44:52],
	8:  _PaletteColorName[52:56],
	9:  _PaletteColorName[56:62],
	10: _PaletteColorName[62:69],
	11: _PaletteColorName[69:79],
	12: _PaletteColorName[79:84],
	13: _PaletteColorName[84:89],
	14: _PaletteColorName[89:98],
	15: _PaletteColorName[98:102],
	16: _PaletteColorName[102:110],
}

func (i PaletteColor) String() string {
	if str, ok := _PaletteColorMap[i]; ok {
		return str
	}
	return fmt.Sprintf("PaletteColor(%d)", i)
}

var _PaletteColorValue = map[string]PaletteColor{
	_PaletteColorName[0:3]:     0,
	_PaletteColorName[3:9]:     1,
	_PaletteColorName[9:15]:    2,
	_PaletteColorName[15:26]:   3,
	_PaletteColorName[26:31]:   4,
	_PaletteColorName[31:40]:   5,
	_PaletteColorName[40:44]:   6,
	_PaletteColorName[44:52]:   7,
	_PaletteColorName[52:56]:   8,
	_PaletteColorName[56:62]:   9,
	_PaletteColorName[62:69]:   10,
	_PaletteColorName[69:79]:   11,
	_PaletteColorName[79:84]:   12,
	_PaletteColorName[84:89]:   13,
	_PaletteColorName[89:98]:   14,
	_PaletteColorName[98:102]:  15,
	_PaletteColorName[102:110]: 16,
}

// ParsePaletteColor attempts to convert a string to a PaletteColor
func ParsePaletteColor(name string) (PaletteColor, error) {
	if x, ok := _PaletteColorValue[name]; ok {
		return PaletteColor(x), nil
	}
	return PaletteColor(0), fmt.Errorf("%s is not a valid PaletteColor, try [%s]", name, strings.Join(_PaletteColorNames, ", "))
}
